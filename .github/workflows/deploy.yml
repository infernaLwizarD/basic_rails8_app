name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é git (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç)
          fetch-depth: 0
          # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ç–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
          # ref: master
          # –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
          # token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          # –ß–∏—Ç–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ .ruby-version
          ruby-version: .ruby-version
          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –∫–µ—à–∏—Ä—É–µ—Ç gems –∏–∑ Gemfile
          bundler-cache: true
          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:
          # working-directory: backend/  # –µ—Å–ª–∏ Rails –≤ –ø–æ–¥–ø–∞–ø–∫–µ
          # cache-version: 1             # –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞

      # ========================================
      # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSH –∫–ª—é—á
      # ========================================
      - name: Set up SSH key for deployment
        uses: webfactory/ssh-agent@v0.9.0
        with:
          # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π SSH –∫–ª—é—á –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ GitHub
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:
        # env:
        #   SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      # ========================================
      # –¢–µ—Å—Ç–∏—Ä—É–µ–º SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      # ========================================
      - name: Test SSH connection
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@$SERVER_IP "echo 'SSH connection successful'"

      - name: Verify deployment environment
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
        run: |
          echo "Deploying to: $SERVER_IP"
          echo "Docker user: $DOCKERHUB_USER"
          echo "Ruby version: $(ruby --version)"
          echo "Rails version: $(bin/rails --version)"

      - name: Pre-deployment checks
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "üîç Checking deployment configuration..."
          
          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã
          test -f config/deploy.yml && echo "‚úÖ config/deploy.yml exists"
          test -f Dockerfile.production && echo "‚úÖ Dockerfile.production exists"
          
          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Kamal
          echo "Validating Kamal configuration..."
          bin/kamal config
          
          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Docker registry
          echo "Testing Docker registry login..."
          docker login -u $DOCKERHUB_USER -p $KAMAL_REGISTRY_PASSWORD
          
          echo "‚úÖ All pre-deployment checks passed!"

      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # –í–µ—Ä—Å–∏—è buildx (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é latest)
          version: latest
          # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ default builder
          install: true
          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã –¥–ª—è —Å–±–æ—Ä–∫–∏
          driver-opts: |
            network=host
            image=moby/buildkit:master

      # ========================================
      # –û–°–ù–û–í–ù–û–ô –î–ï–ü–õ–û–ô
      # ========================================
      
      - name: Deploy with Kamal
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          # DATABASE_URL: postgres://user:pass@host:5432/dbname
        run: |
          echo "üöÄ Starting deployment..."
          bin/kamal deploy
          echo "‚úÖ Deployment completed successfully!"

      # ========================================
      # –ü–û–°–¢-–î–ï–ü–õ–û–ô –ü–†–û–í–ï–†–ö–ò
      # ========================================
      
      - name: Health check
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "‚è≥ Waiting for application to start..."
          sleep 30
          
          echo "üè• Performing health check..."
          curl -f http://$SERVER_IP/up || exit 1
          
          echo "üê≥ Checking Docker containers..."
          ssh root@$SERVER_IP "docker ps | grep basic_rails8_app"
          
          echo "‚úÖ Health check passed!"

      - name: Notify success
        if: success()
        run: |
          echo "üéâ Deployment successful!"
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack/Discord

      - name: Rollback on failure
        if: failure()
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "‚ùå Deployment failed, rolling back..."
          bin/kamal rollback 
<% model_var = resource_name %>
<% model_var_plural = resource_name.pluralize %>
<% path_prefix = route_path %>
require 'rails_helper'

RSpec.shared_examples 'edit_<%= model_var %>' do
  it 'успешно редактирует' do
    open_from_table(table_id: '<%= model_var_plural %>-table', text: edited_<%= model_var %>.label)

    click_on 'Редактировать'

    new_label = 'Обновлённое наименование'
    fill_in 'Наименование', with: new_label

    click_on 'Сохранить'

    expect(page).to have_content '<%= to_html_escape_numeric(resource_label_raw) %> отредактирован'
    expect(page).to have_content new_label
  end

  it 'получает сообщение об ошибке не заполнив обязательных полей' do
    open_from_table(table_id: '<%= model_var_plural %>-table', text: edited_<%= model_var %>.label)

    click_on 'Редактировать'

    fill_in 'Наименование', with: ''

    click_on 'Сохранить'

    expect(page).to have_content 'не может быть пустым'
  end
end

RSpec.describe 'Редактирование <%= to_ruby_unicode_literal(resource_label_genitive) %>', js: true, type: :system do
  before do
    logged_as(user)
    visit root_path
  end

  context 'Администратор' do
    let(:user) { create(:user, :admin) }

    let_it_be(:some_<%= model_var %>) { create(:<%= model_var %>) }

    before do
      open_menu_links('Справочники', '<%= to_html_escape_numeric(resource_label_plural) %>')
    end

    context 'редактирование <%= to_ruby_unicode_literal(resource_label_genitive) %>' do
      let(:edited_<%= model_var %>) { some_<%= model_var %> }

      it_behaves_like 'edit_<%= model_var %>'
    end
  end

  context 'Обычный пользователь' do
    let(:user) { create(:user) }

    let_it_be(:some_<%= model_var %>) { create(:<%= model_var %>) }

    it 'не видит пункт меню "Справочники"' do
      within('.sidebar-menu') do
        expect(page).to have_no_content('Справочники')
      end
    end

    it 'перенаправляется на главную с сообщением об ошибке при попытке доступа' do
      visit <%= path_prefix %>_path
      expect(current_path).to eq(root_path)
      expect(page).to have_content('Доступ запрещён')
    end
  end
end

require 'rails_helper'

RSpec.describe 'Удаление <%= resource_label_genitive %>', js: true, type: :system do
  before do
    logged_as(user)
    visit root_path
  end

  context 'Администратор' do
    let(:user) { create(:user, :admin) }

    let_it_be(:deleting_<%= resource_name %>) { create(:<%= resource_name %>, label: 'Удаляемое') }
    let_it_be(:deleted_<%= resource_name %>) { create(:<%= resource_name %>, :discarded_<%= resource_name %>, label: 'Удалённое') }

    before do
      open_menu_links('Справочники', '<%= resource_label_plural %>')
    end

    it 'удаляет <%= resource_label_accusative %>' do
      open_from_table(table_id: '<%= resource_name_plural %>-table', text: deleting_<%= resource_name %>.label)

      accept_confirm do
        click_on 'Удалить'
      end

      expect(page).to have_content '<%= resource_label_raw %> удалён'
    end

    it 'восстанавливает <%= resource_label_accusative %>' do
      open_from_table(table_id: '<%= resource_name_plural %>-table', text: deleted_<%= resource_name %>.label)

      click_on 'Восстановить'

      expect(page).to have_content '<%= resource_label_raw %> восстановлен'
    end
  end

  context 'Обычный пользователь' do
    let(:user) { create(:user) }

    let_it_be(:some_<%= resource_name %>) { create(:<%= resource_name %>) }

    it 'не видит пункт меню "Справочники"' do
      within('.sidebar-menu') do
        expect(page).to have_no_content('Справочники')
      end
    end

    it 'перенаправляется на главную с сообщением об ошибке при попытке доступа' do
      visit <%= route_path %>_path
      expect(current_path).to eq(root_path)
      expect(page).to have_content('Доступ запрещён')
    end
  end
end
